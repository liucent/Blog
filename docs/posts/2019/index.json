[
    {
        "ref": "https://www.ariesme.com/posts/2019/several_domains_and_ssl_certificates_in_nginx/",
        "title": "Nginx配置多域名SSL证书",
        "section": "posts",
        "tags": ["nginx","ssl"],
        "date" : "2019.11.23",
        "body": "一直以来都只在nginx中使用过单域名以及单个SSL证书的配置. 前些天注册了个新域名并把新域名套上了cloudflare. 于是就想把新老域名都配置上同一个nginx站点, 也顺便对比下套与不套cloudflare的区别. 在网上搜索了下配置其实还是挺简单的, 只要找到原站点的配置文件并把原有的server配置再添加一个同样的并小修改下即可.\n原有站点配置文件 在nginx的配置文件路径下找到原有站点的配置文件(一般在该路径下/usr/local/nginx/conf/vhost/). 找到类似如下的server配置项.\nserver { listen 443 ssl http2; listen [::]:443 ssl http2; server_name www.aaa.com ; index index.html index.htm index.php default.html default.htm default.php; root /home/wwwroot/www.aaa.com; ssl_certificate /etc/letsencrypt/live/www.aaa.com/fullchain.pem; ssl_certificate_key /etc/letsencrypt/live/www.aaa.com/privkey.pem; #...  } 添加新域名和证书 在上述server配置项下再添加一个相同的server配置项并把相应域名改称新域名, 证书路径也改成新域名证书的路径. server中的其他配置, 特别是root的配置千万不要修改.\nserver { listen 443 ssl http2; listen [::]:443 ssl http2; server_name www.bbb.com; #更改成新域名  index index.html index.htm index.php default.html default.htm default.php; root /home/wwwroot/www.aaa.com; #不要修改  #更改成新域名证书的路径  ssl_certificate /etc/letsencrypt/live/www.bbb.com/fullchain.pem; ssl_certificate_key /etc/letsencrypt/live/www.bbb.com/privkey.pem; #...  } 重启nginx 修改并保存站点配置文件后直接重启nginx, 然后通过新老域名都可以访问站点了. 另外如果套了cloudflare就需要在cloudflare上设置成full或者full(strict).\n更新历史    Version Detail Date     1.0 初版 2019-11-23   "
    }
,
    {
        "ref": "https://www.ariesme.com/posts/2019/add_toc_for_hugo/",
        "title": "Hugo添加文章目录toc",
        "section": "posts",
        "tags": ["hugo","toc"],
        "date" : "2019.10.30",
        "body": "这几天在原来hugo主题minimal的基础上尝试加了两个功能, 一个是站内搜索, 一个是文章目录(Table of Contents). 不过都是跟着其他主题修改过来的. 这次先写下文章目录toc的移植修改过程.\n1. 添加toc显示变量 如果你想始终显示toc的话, 其实可以不用设置这些变量. 但是在小屏幕或者移动设备上, 显示toc的体验并不好, 一是占用屏幕空间, 二是对于可滑动的屏幕也无必要. 所以还是建议大家在config.toml中加上toc的显示控制变量. 后面也可以js上控制是否显示.\n[params] toc = true 2. toc模板和样式 Hugo自带的有toc模板, 可以通过{{.Content}}引入这个模板, 具体可以看官方使用教程.\n2.1. 新建toc模板 个人觉得这个默认模板的样式不好设置, 另外的问题就是默认模板从\u0026lt;h1\u0026gt;就开始生成目录了, 这个对于喜欢把\u0026lt;h1\u0026gt;作为文章标题, 而文章内容从\u0026lt;h2\u0026gt;开始的同学包括我来说不是很灵活. 因此决定自己写模板. 于是就来借用了AllInOne主题的toc模板, 加了点小改动. 在layouts/partials目录下新建toc.html. 这个模板就能生成ul\u0026gt;li\u0026gt;a层级的目录结构了, 其中\u0026lt;ul\u0026gt;的层级数和\u0026lt;h\u0026gt;header数一致.\n\u0026lt;!-- toc.html --\u0026gt; \u0026lt;!-- ignore empty links with + --\u0026gt; {{ $headers := findRE \u0026#34;\u0026lt;h[1-4].*?\u0026gt;(.|\\n])+?\u0026lt;/h[1-4]\u0026gt;\u0026#34; .Content }} \u0026lt;!-- at least one header to link to --\u0026gt; {{ if ge (len $headers) 1 }} {{ $h1_n := len (findRE \u0026#34;(.|\\n])+?\u0026#34; .Content) }} {{ $re := (cond (eq $h1_n 0) \u0026#34;\u0026lt;h[2-4]\u0026#34; \u0026#34;\u0026lt;h[1-4]\u0026#34;) }} {{ $renum := (cond (eq $h1_n 0) \u0026#34;[2-4]\u0026#34; \u0026#34;[1-4]\u0026#34;) }} \u0026lt;!--Scrollspy--\u0026gt; \u0026lt;div class=\u0026#34;toc\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;page-header\u0026#34;\u0026gt;\u0026lt;strong\u0026gt;- CATALOG -\u0026lt;/strong\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;div id=\u0026#34;page-scrollspy\u0026#34; class=\u0026#34;toc-nav\u0026#34;\u0026gt; {{ range $headers }} {{ $header := . }} {{ range first 1 (findRE $re $header 1) }} {{ range findRE $renum . 1 }} {{ $next_heading := (cond (eq $h1_n 0) (sub (int .) 1 ) (int . ) ) }} {{ range seq $next_heading }} \u0026lt;ul class=\u0026#34;nav\u0026#34;\u0026gt; {{end}} {{ $anchorId := (replaceRE \u0026#34;.* id=\\\u0026#34;(.*?)\\\u0026#34;.*\u0026#34; \u0026#34;$1\u0026#34; $header ) }} \u0026lt;li class=\u0026#34;nav-item\u0026#34;\u0026gt; \u0026lt;a class=\u0026#34;nav-link text-left\u0026#34; href=\u0026#34;#{{ $anchorId }}\u0026#34;\u0026gt; {{ $header | plainify | htmlUnescape }} \u0026lt;/a\u0026gt; \u0026lt;/li\u0026gt; \u0026lt;!-- close list --\u0026gt; {{ range seq $next_heading }} \u0026lt;/ul\u0026gt; {{ end }} {{ end }} {{ end }} {{ end }} \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;!--Scrollspy--\u0026gt; {{ end }} 2.2. 新建toc样式  主要是设置toc, toc-nav和nav-link的样式, 其中的颜色主要是为了和minimal主题适配, accent的颜色变量就是minimal主题可设置的主颜色. 在自己的css样式文件(例如static/css/custom.css)中添加如下代码.  /* toc style */ .toc { position: fixed; top: 50%; right: 10%; width: 10%; transform: translateY(-50%); /*background-color: #f6f6f6;*/ /*border: solid 1px #c9c9c9;*/ border-radius: 5px; padding-bottom: 1rem; } .toc .page-header { margin-top: 1rem; margin-bottom: 1rem; } .toc-nav ul { overflow:hidden; white-space:nowrap; line-height: 1rem; } /* ignore h1 header */ .toc-nav ul ul ul { margin-left: 2rem; } .toc-nav .nav-link { text-overflow:ellipsis; overflow:hidden; color: #333; }  除了设置静态的样式外, 也要设置下目录条目在激活状态下的样式. 当页面滚动到相应目录时, 目录条目就会处于激活状态. 这个功能是由scrollspy实现的, 这个后面再介绍. 现在只要先设置好目录条目在class=\u0026quot;active\u0026quot;时的样式就行, 具体的样式就是文字变色, 条目背景变色并且在条目左边生成一条小竖线.  .toc-nav li.active .nav-link { background-color: #f6f6f6; color: var(--accent); border-left: solid 2px var(--accent); }  手机, 平板等小屏幕设备上显示toc目录会很拥挤, 体验并不好. 所以在小屏幕设备上将目录隐藏. 如下代码中当屏幕宽度小于1080px时, 将隐藏class=\u0026quot;toc\u0026quot;的元素, 并将main元素宽度扩大到100%, 让文章内容宽度适配屏幕宽度.  /* Media Queries */ @media (max-width: 1080px) { main { max-width: 100%; } .toc { display: none; } } 2.3. 引入toc模板 添加好toc模板和样式代码后, 下面就要将toc模板引入到文章模板中. 在文章模板文件(layouts/post/single.html)中\u0026lt;footer\u0026gt;元素之前添加toc模板. 当toc=true时才会添加模板, 默认false不添加.\n{{ if .Site.Params.toc | default false }} {{ partial \u0026#34;toc\u0026#34; . }} {{ end }} 3. 添加目录跳转 经过前面的几个步骤, 文章目录已经可以在文章页面的右侧固定显示了. 如果文章章节标题\u0026lt;h\u0026gt;元素的内容为英文的话, 点击目录也会跳转到对应章节. 但是这里还是会有两个问题, 第一个问题是Hugo自动转换\u0026lt;h\u0026gt;元素时, 会把内容转换成id属性值, 也就是说如果章节标题是中文的话, id值也是中文. 然而在toc模板中通过Hugo的{{.Content}}内容截取\u0026lt;h\u0026gt;章节标题时会将中文字符编码成%xx. toc条目的href属性值也就是%xx类似的编码了, 这样js无法识别, 点击目录条目就会报错. 第二个问题是默认的点击条目跳转章节的动画是直接生硬的跳到对应章节, 没有过渡动画, 视觉效果不是很理想.下面就来一一解决这两个问题.\n3.1. 中文字符编码 这里用到decodeURI方法将toc条目元素\u0026lt;a\u0026gt;的href属性值%xx形式解码成中文. hash的结果就是该元素的href值, 例如\u0026rdquo;#章节标题\u0026rdquo;. 但是前面的#号是不需要解码的, 用replace替换成空字符就行了.\n/* decode chinese hash */ var target = decodeURI(this.hash.replace(/^#/, \u0026#39;\u0026#39;)); 3.2. 平滑跳转 上面我们已经可以得到正确的中文字符的hash位置值了, 然后通过该值和章节标题元素的id属性值, 找到对应的章节标题元素. 进而使用offset方法计算出该标题元素与页面顶端的距离. 最后通过animate方法平滑滚动到对应位置. 在自己的js文件中添加如下完整的js代码. 其中navbarHeight变量是页面顶部导航栏的高度, 由于我是固定导航栏, 所以要扣除这个高度的影响. 如果你是自动隐藏或者不固定的导航栏, 可以不用扣除这个值. scrollSpeed是滚动速度, 可以自行调整成自己喜欢的速度.\n/* scroll to the anchor and scroll spy */ var navbarHeight = 55; $(\u0026#34;#page-scrollspy a.nav-link\u0026#34;).on(\u0026#39;click\u0026#39;, function () { /* decode chinese hash */ var target = decodeURI(this.hash.replace(/^#/, \u0026#39;\u0026#39;)); $(\u0026#39;html,body\u0026#39;).animate({scrollTop: $(\u0026#34;:header[id=\u0026#39;\u0026#34; + target + \u0026#34;\u0026#39;]\u0026#34;).offset().top - navbarHeight}, scrollSpeed); return false; }); 4. 添加滑动监听 最后我们来解决页面的滚动监听功能, 这里会用到bootstrap的scrollspy插件, 这里有比较不错的scrollspy教程. 这样页面滚动到章节内容时, toc目录中对应的条目就会变成active状态, 结合前面设置的li.active的样式就能清楚的看出当前章节的位置了. 添加滑动监听有两种方法, 一是在所要监听的元素上设置data-spy和data-target属性, 通过data-target属性值将toc目录组件与被监听元素绑定起来. 二是在js文件中绑定这些元素属性. 个人觉得在html中绑定, 不是很灵活, 而且不好找到元素. 所以选择在js中绑定, 代码如下. 其中offset依旧是顶部导航栏的高度, 这里多加的5px, 是为了调整点击跳转和页面平滑滚两种情况下目录条目active状态的些许误差. 这个值根据实际页面情况调整, 并非固定值.\n$(\u0026#39;body\u0026#39;).scrollspy({ target: \u0026#34;#page-scrollspy\u0026#34;, offset: navbarHeight+5 }); 5. 遗留问题 上面我们虽然通过decodeURI方法解决了目录跳转中的中文编码问题. 但是scrollspy对中文的支持并不好, 如果目录条目href或者文章章节标题id中含有中文字符, 滚动监听将失效, 并会报js错误. 目前没发现好的办法解决这个问题. 所以只能先手动在markdown文件中添加各个标题的id属性, 注意属性值在文章中的唯一性.\n## title {#id_value} 6. 更新历史    Version Detail Date     1.0 初版 2019-10-30   1.1 小屏幕隐藏目录 2019-11-09   "
    }
,
    {
        "ref": "https://www.ariesme.com/posts/2019/add_prism_for_hugo_automatically/",
        "title": "Hugo动态加载prism.js",
        "section": "posts",
        "tags": ["hugo","prism"],
        "date" : "2019.10.20",
        "body": "以前文章记录过怎样在Hugo中添加prism代码高亮的方法. 但是每次添加新的语言或者想换个主题就得重新去官网下载新的js和css文件, 比较繁琐. 所以今天介绍下利用cdnjs来通过变量动态加载所需语言和主题的方法.\n添加语言和主题等变量 在config.toml中添加四个变量, 一是是否开启prism, 二是选择的样式主题, 三是选择语言集合, 四是是否开启行号.\n[params] prism = true prismStyle = \u0026#34;coy\u0026#34; # theme: okaidia, coy... prismLanguages = [\u0026#34;bash\u0026#34;, \u0026#34;java\u0026#34;, \u0026#34;toml\u0026#34;, \u0026#34;yaml\u0026#34;, \u0026#34;nginx\u0026#34;] prismLineNumbers = true 动态添加js文件 在添加js设置的文件中, body元素的结尾处, 添加如下代码. js中包含了基础包, 语言集合以及行号插件. 另外如果prism和prismLineNumbers变量未设置则默认不加载prism和行号.\n\u0026lt;!-- prism.js default by false--\u0026gt; {{ if .Site.Params.prism | default false }} \u0026lt;!-- base js --\u0026gt; \u0026lt;script src=\u0026#34;https://cdnjs.cloudflare.com/ajax/libs/prism/1.17.1/prism.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;!-- languages --\u0026gt; {{ range .Site.Params.prismLanguages }} \u0026lt;script src=\u0026#34;https://cdnjs.cloudflare.com/ajax/libs/prism/1.17.1/components/prism-{{ . }}.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; {{ end }} \u0026lt;!-- line-numbers default by false --\u0026gt; {{ if .Site.Params.prismLineNumbers | default false }} \u0026lt;script src=\u0026#34;https://cdnjs.cloudflare.com/ajax/libs/prism/1.17.1/plugins/line-numbers/prism-line-numbers.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; {{ end }} {{ end }} 动态添加css文件 在添加css设置的文件中, head元素结尾处, 添加如下代码. css中包含了样式主题和行号插件. 另外如果prismStyle和prismLineNumbers变量未设置则默认主题为okaidia和不加载行号.\n\u0026lt;!-- theme style --\u0026gt; {{ if .Site.Params.prism | default false }} \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;https://cdnjs.cloudflare.com/ajax/libs/prism/1.17.1/themes/prism-{{ .Site.Params.prismStyle | default \u0026#34;okaidia\u0026#34; }}.min.css\u0026#34;\u0026gt; {{ end }} \u0026lt;!-- line numbers --\u0026gt; {{ if .Site.Params.prismLineNumbers | default false }} \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;https://cdnjs.cloudflare.com/ajax/libs/prism/1.17.1/plugins/line-numbers/prism-line-numbers.min.css\u0026#34;\u0026gt; {{ end }} 行号简化设置 经过以上步骤其实就可以使用prism的功能了. 但是行号设置还是比较复杂, 一是```code```代码块不支持行号设置, 二是\u0026lt;pre\u0026gt;code\u0026lt;/pre\u0026gt;代码块中要显示行号每次都要添加class=\u0026quot;line-numbers\u0026rdquo;. 查看prism官方介绍得知可以在body元素中添加class=\u0026quot;line-numbers\u0026quot;就可以让整个页面中的prism代码块都显示行号. 这样我们只要在Hugo的页面模板(single或者baseof等)中稍加改动就可以轻松显示行号并且可以直接让```code```代码块显示行号, 而不用再在每块代码处添加class行号属性了.\n\u0026lt;body {{ if .Site.Params.prismLineNumbers }}class=\u0026#34;line-numbers\u0026#34;{{ end }}\u0026gt; "
    }
,
    {
        "ref": "https://www.ariesme.com/posts/2019/add_chinese_input_method_for_elementary/",
        "title": "Elementary安装中文输入法",
        "section": "posts",
        "tags": ["elementary","linux","ibus","fcitx"],
        "date" : "2019.07.14",
        "body": "前段时间安装基于fcitx的输入法, 最近发现其实系统自带的有ibus中文输入法, 现在统一记录下配置两种输入法的方法.\n1. 配置ibus输入法 1.1. 添加中文输入法 在Applications中打开System Settings, 依次进入Language\u0026amp;Region-\u0026gt;Keyboard Settings-\u0026gt;Input Method Settings-\u0026gt;Input Method页面. 点击Add按钮, 选择Chinese-\u0026gt;Intelligent Pinyin. 添加成功后, 点击Save按钮退出. PS: 第一次进入可能会提示iBus未启动, 点击Yes启动iBus就行了.\n1.2. 设置iBus为默认输入法 Terminal中运行如下命令, 在弹出的窗口点击两次Yes后选择iBus并保存.\nsudo im-config 1.3. 重启机器 重启完后, 默认就是中文输入法了, 点击shift可在中英文输入法之间切换, 也可以ctrl+space切换到别的输入法.\n2. 配置fcitx输入法 2.1. 安装fcitx 打开Terminal并运行如下命令.\nsudo apt install fcitx 2.2. 设置fcitx为默认输入法 Terminal中运行如下命令, 在弹出的窗口点击两次Yes后选择fcitx并保存.\nsudo im-config 2.3. 安装fcitx-pinyin Terminal中运行如下命令.\nsudo apt install fcitx-pinyin 2.4. 重启机器 重启完后, ctrl+space可切换到fictx输入法, 后续点击shift可在中英文输入法之间切换.\n"
    }
,
    {
        "ref": "https://www.ariesme.com/posts/2019/generate_wildcard_ssl/",
        "title": "手动生成SSL通配符证书",
        "section": "posts",
        "tags": ["ssl"],
        "date" : "2019.06.08",
        "body": "以前一直使用的LNMP自动生成的证书, 也没在意生成的是不是通配符证书. 前段时间折腾私人网盘时, 竟然触发了Let\u0026rsquo;s Encrypt的申请证书次数限制. 遂来手动生成通配符SSL证书.\n安装Certbot工具 Certbot是Let\u0026rsquo;s Encrypt官方推荐生成证书的工具. 在Terminal中运行以下命令来安装Certbot.\nwget https://dl.eff.org/certbot-auto sudo mv certbot-auto /usr/local/bin/certbot-auto sudo chown root /usr/local/bin/certbot-auto chmod 0755 /usr/local/bin/certbot-auto /usr/local/bin/certbot-auto --install-only 申请通配符SSL证书  在Terminal中运行以下命令来生成通配符SSL证书(*.ariesme.com).  certbot-auto certonly --manual --preferred-challenges dns-01 -d *.ariesme.com --server https://acme-v02.api.letsencrypt.org/directory  过程中会要求检测域名TXT记录, 需要先修改域名DNS TXT记录(_acme-challenge.ariesme.com)成要求的信息. 添加后在另一个Terminal窗口中用以下命令检查TXT记录是否生效. 生效后在原命令窗口中回车继续生成证书.  dig -t txt _acme-challenge.ariesme.com  当出现如下信息时就说明生成成功了  - Congratulations! Your certificate and chain have been saved at: /etc/letsencrypt/live/ariesme.com/fullchain.pem Your key file has been saved at: /etc/letsencrypt/live/ariesme.com/privkey.pem  LNMP新建VHOST时就可以设置上述两个文件路径来使用我们自己手动生成的通配符证书.  手动更新证书 在Terminal中运行以下命令来更新已有证书(*.ariesme.com). 过程中会要求更新域名TXT记录, 与原申请证书时的步骤一致.\ncertbot-auto certonly --renew-by-default --manual --preferred-challenges dns-01 -d *.ariesme.com --server https://acme-v02.api.letsencrypt.org/directory 优缺点  这样手动生成的证书可以给所有二级域名使用, 做到一次生成多次使用. 由于是用_acme-challenge的DNS设置验证的域名所有权, 而且证书的有效期只有90天, 所以每次需要修改DNS来手动更新证书.  更新历史    Version Detail Date     1.0 初版 2019-06-08   1.1 手动更新证书 2019-10-08   "
    }
,
    {
        "ref": "https://www.ariesme.com/posts/2019/add_google_search_console_for_hugo/",
        "title": "Hugo添加Google收录",
        "section": "posts",
        "tags": ["hugo","google"],
        "date" : "2019.03.07",
        "body": "把自己的Hugo Blog添加到Google收录中, 让其他人能通过Google搜索到你的Blog文章.\n注册谷歌收录帐号 打开Google Search Console官网注册谷歌收录帐号.\n添加网站链接并完成验证 将自己Blog的网站链接填入谷歌收录中, 会提示你验证自己的网站, 有如下验证方式.\n Google Analytics HTML file HTML tag Google Tag Manager Domain name provider  由于前面我的网站已经添加到了Google Analytics中, 这次只需选择该方式就能轻松通过验证. 具体方法参见添加Google Analytics的文章.\n"
    }
,
    {
        "ref": "https://www.ariesme.com/posts/2019/add_google_custom_search_for_hugo/",
        "title": "Hugo添加Google Custom Search站内搜索",
        "section": "posts",
        "tags": ["hugo","google"],
        "date" : "2019.03.02",
        "body": "Hugo没有自带站内搜索, 可以使用Google Custom Search Engine来代替.\n注册GCSE Google Custom Search官网注册帐号, 添加自己网站的链接并记录下cx参数和搜索框代码.\n cx参数  https://cse.google.com/cse?cx=xxx:xxx  搜索框代码  \u0026lt;script\u0026gt; (function() { var cx = \u0026#39;xxx:xxx\u0026#39;; var gcse = document.createElement(\u0026#39;script\u0026#39;); gcse.type = \u0026#39;text/javascript\u0026#39;; gcse.async = true; gcse.src = \u0026#39;https://cse.google.com/cse.js?cx=\u0026#39; + cx; var s = document.getElementsByTagName(\u0026#39;script\u0026#39;)[0]; s.parentNode.insertBefore(gcse, s); })(); \u0026lt;/script\u0026gt; \u0026lt;gcse:search\u0026gt;\u0026lt;/gcse:search\u0026gt; 配置文件中添加GCSE参数 在config.toml配置文件中添加cx参数\n[Params] googleCustomSearch = \u0026#34;xxx:xxx\u0026#34; # Google Custom Search Engine ID 打开搜索框插件, 需要主题支持\n[Params.sidebar] widgets = [\u0026#34;search\u0026#34;, \u0026#34;recent\u0026#34;, \u0026#34;categories\u0026#34;, \u0026#34;taglist\u0026#34;, \u0026#34;social\u0026#34;] 新建搜索框插件 如果主题中没有搜索框插件文件或者不喜欢主题搜索框的样式, 可以直接在Google上设置搜索样式并将相应的搜索框代码嵌入到页面div字段中. 由于mainroad主题中有搜索插件, 所以我选择使用主题提供的搜索框样式, 然后在插件文件中加入GCSE参数就行了.\n  新建搜索框文件 Hugo根目录下新建搜索框插件文件(./layouts/partials/widgets/search.html), 并将主题目录下相同路径的search.html文件内容拷贝到新文件中.\n  新增GCSE参数\n   action=\u0026quot;https://cse.google.com/cse\u0026rdquo; 表示使用GCSE搜索 .Site.Params.googleCustomSearch 将config.toml文件中的googleCustomSearch赋值给cx  \u0026lt;div class=\u0026#34;widget-search widget\u0026#34;\u0026gt; \u0026lt;form class=\u0026#34;widget-search__form\u0026#34; role=\u0026#34;search\u0026#34; method=\u0026#34;get\u0026#34; action=\u0026#34;https://cse.google.com/cse\u0026#34;\u0026gt; \u0026lt;label\u0026gt; \u0026lt;input class=\u0026#34;widget-search__field\u0026#34; type=\u0026#34;search\u0026#34; placeholder=\u0026#34;{{ T \u0026#34;search_placeholder\u0026#34; }}\u0026#34; value=\u0026#34;\u0026#34; name=\u0026#34;q\u0026#34; aria-label=\u0026#34;{{ T \u0026#34;search_placeholder\u0026#34; }}\u0026#34;\u0026gt; \u0026lt;/label\u0026gt; \u0026lt;input class=\u0026#34;widget-search__submit\u0026#34; type=\u0026#34;submit\u0026#34; value=\u0026#34;Search\u0026#34;\u0026gt; \u0026lt;input type=\u0026#34;hidden\u0026#34; name=\u0026#34;cx\u0026#34; value=\u0026#34;{{ .Site.Params.googleCustomSearch }}\u0026#34; /\u0026gt; \u0026lt;/form\u0026gt; \u0026lt;/div\u0026gt; "
    }
,
    {
        "ref": "https://www.ariesme.com/posts/2019/add_go_top_button_for_hugo/",
        "title": "Hugo添加返回顶部按钮",
        "section": "posts",
        "tags": ["hugo"],
        "date" : "2019.03.01",
        "body": "返回顶部按钮虽然看上去小巧，但确实是个很方便的功能. 读者阅读完一些较长文章后能快速返回页面顶部点选其他文章.\n1. 基础模板文件中添加返回顶部按钮元素 Hugo站点根目录下的基础模板文件(./layouts/_default/baseof.html)的body字段尾部添加如下代码. 如果没有该路径或者该html文件, 可以将主题目录themes下相同路径的baseof.html文件拷贝至此.\n class=\u0026quot;btn\u0026rdquo; 表示使用主题style.css中的.btn样式, 也可以用自己的样式 id=\u0026quot;goTopBtn\u0026rdquo; 按钮的id, 便于在css文件中编写特定的样式, 或者在js文件编写方法 onclick=\u0026quot;smoothScrollTop()\u0026rdquo; 点击按钮运行js文件中的smoothScrollTop方法 title=\u0026quot;Go to top\u0026rdquo; 表示光标移动到按钮上时显示的tips  \u0026lt;body\u0026gt; \u0026lt;button class=\u0026#34;btn\u0026#34; onclick=\u0026#34;smoothScrollTop()\u0026#34; id=\u0026#34;goTopBtn\u0026#34; title=\u0026#34;Go to top\u0026#34;\u0026gt;TOP\u0026lt;/button\u0026gt; \u0026lt;/body\u0026gt; 2. 按钮自定义样式 Hugo站点根目录下的自定义样式文件(./static/css/custom.css)中添加如下代码. 添加css和js文件的方法可以参看Hugo添加Prism代码高亮这篇文章中添加prism.css和prism.js文件的方法.\n #name 表示该样式应用于id=\u0026quot;name\u0026quot;的元素 .name 表示该样式应用于class=\u0026quot;name\u0026quot;的元素 position: fixed; 表示按钮在页面上的固定位置, 结合bottom和right参数可以将按钮固定在页面左下角 z-index: 99; 表示z轴参数, 将按钮置于页面最顶层, 防止被其他元素遮盖 cursor: pointer; 表示光标移动到按钮上部时光标指针变成小手  #goTopBtn { display: none; /* Hidden by default */ position: fixed; /* Fixed/sticky position */ bottom: 25px; /* Place the button at the bottom of the page */ right: 25px; /* Place the button 30px from the right */ z-index: 99; /* Make sure it does not overlap */ border: none; /* Remove borders */ outline: none; /* Remove outline */ cursor: pointer; /* Add a mouse pointer on hover */ padding: 10px; /* Some padding */ border-radius: 0.3em; /* Rounded corners */ font-size: 12px; /* Increase font size */ } 下面是使用class=\u0026quot;btn\u0026quot;后继承于主题中的btn样式部分代码. btn:hover表示光标移动到按钮上部时按钮变色.\n/* Button */ .btn { padding: 5px 10px; font-weight: 700; color: #fff; white-space: pre-line; background: #2a2a2a; } .btn:hover { color: #fff; background: #e64946; } 3. 返回顶部行为方法 返回顶部的方法可以用javascript实现, 也可以用jquery实现. 下面就分开介绍下.\n3.1. javascript方法 Hugo站点根目录下的自定义JavaScript文件(./static/js/custom.js)中添加如下代码. 提供了两种返回方式, 可根据喜好选择其中一种.\n scrollTop 方法是直接回顶部 smoothScrollTop 方法是平滑回滚到顶部 scrollTopButton 方法只有向下滚动超过20px后才会显示按钮, 其他情况按钮隐藏  // When the user scrolls down 20px from the top of the document, show the button window.onscroll = function() {scrollTopButton()}; function scrollTopButton() { if (document.body.scrollTop \u0026gt; 20 || document.documentElement.scrollTop \u0026gt; 20) { document.getElementById(\u0026#34;goTopBtn\u0026#34;).style.display = \u0026#34;block\u0026#34;; } else { document.getElementById(\u0026#34;goTopBtn\u0026#34;).style.display = \u0026#34;none\u0026#34;; } } // When the user clicks on the button, scroll to the top of the document function scrollTop() { document.body.scrollTop = 0; // For Safari  document.documentElement.scrollTop = 0; // For Chrome, Firefox, IE and Opera } //Smooth scroll to the top of the document function smoothScrollTop(){ var timer = null; cancelAnimationFrame(timer); timer = requestAnimationFrame(function fn(){ var oTop = document.body.scrollTop || document.documentElement.scrollTop; if(oTop \u0026gt; 0){ document.body.scrollTop = document.documentElement.scrollTop = oTop - 50; timer = requestAnimationFrame(fn); }else{ cancelAnimationFrame(timer); } }); } 3.2. jquery方法 上面的样式是根据以前主题写的, 现在更新jquery的方法就顺便记录下当前主题配套的返回按钮样式, css代码如下, 其中返回按钮元素id=\u0026quot;gotoTop\u0026rdquo;.\n/*gotoTop button*/ #gotoTop { position:fixed; right:0; opacity:.8; visibility:hidden; bottom:25px; margin:0 25px 0 0; z-index:99; transition:.35s; transform:scale(0); transition:all .5s } #gotoTop.visible { opacity:.8; visibility:visible; transform:scale(1) } #gotoTop.visible a:hover { outline:none; opacity:.9; background:var(--accent) } #gotoTop a { outline:none; text-decoration:none; border:0; display:block; width:46px; height:46px; background-color:#212121; opacity:.8; transition:all .3s; border-radius:50%; text-align:center; font-size:26px } body #gotoTop a { outline:none; color:#fff } #gotoTop a:after { outline:none; content:\u0026#34;\\f106\u0026#34;; font-family:fontawesome; position:relative; display:block; top:50%; -webkit-transform:translateY(-55%); transform:translateY(-55%); color:#ffffff } 同以前一样, 将返回按钮添加在\u0026lt;footer\u0026gt;元素之前.\n\u0026lt;!-- goto Top button --\u0026gt; \u0026lt;div id=\u0026#34;gotoTop\u0026#34;\u0026gt;\u0026lt;a href=\u0026#34;#\u0026#34;\u0026gt;\u0026lt;/a\u0026gt;\u0026lt;/div\u0026gt; jquery代码部分主要是用animate方法. 按钮的显示与隐藏用visible属性实现.\n/* Back to Top button behaviour */ var pxShow = 100; var scrollSpeed = 500; $(window).scroll(function() { if ($(window).scrollTop() \u0026gt;= pxShow) { $(\u0026#34;#gotoTop\u0026#34;).addClass(\u0026#39;visible\u0026#39;); } else { $(\u0026#34;#gotoTop\u0026#34;).removeClass(\u0026#39;visible\u0026#39;); } }); $(\u0026#39;#gotoTop a\u0026#39;).on(\u0026#39;click\u0026#39;, function() { $(\u0026#39;html, body\u0026#39;).animate({ scrollTop: 0 }, scrollSpeed); ; return false; }); 4. 更新历史    Version Detail Date     1.0 初版 2019-03-01   1.1 添加jquery方法 2019-11-02   "
    }
,
    {
        "ref": "https://www.ariesme.com/posts/2019/add_google_analytics_for_hugo/",
        "title": "Hugo添加Google Analytics",
        "section": "posts",
        "tags": ["hugo","google"],
        "date" : "2019.02.24",
        "body": "Hugo Blog添加Google Analytics\n注册Google Analytics  打开Google Analytics官网注册账户并添加自己的网站域名 打开Google Analytics主页-\u0026gt;Admin-\u0026gt;Property-\u0026gt;Tracking Info-\u0026gt;Tracking Code并获取对应域名的Tracking Code  设置googleAnalytics参数 在config.toml中新建googleAnalytics参数并设置成自己的Tracking Code\ngoogleAnalytics = \u0026#34;xx-xxxxxxxxx-x\u0026#34; # Enable Google Analytics by entering your tracking id 新建Google Analytics模板 在Hugo站点根目录下新建模板文件(./layouts/_internal/google_analytics_async.html)并添加如下代码.\n\u0026lt;!-- Global Site Tag (gtag.js) - Google Analytics --\u0026gt; \u0026lt;script async src=\u0026#34;https://www.googletagmanager.com/gtag/js?id={{ .Site.GoogleAnalytics }}\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script\u0026gt; window.dataLayer = window.dataLayer || []; function gtag(){dataLayer.push(arguments);} gtag(\u0026#39;js\u0026#39;, new Date()); gtag(\u0026#39;config\u0026#39;, \u0026#39;{{ .Site.GoogleAnalytics }}\u0026#39;); \u0026lt;/script\u0026gt; 引用Google Analytics模板 在baseof.html基础模板文件中的head标签尾部添加如下代码, 这样站点发布到非Hugo Server后就会自动引用Google Analytics模板.\n\u0026lt;head\u0026gt; {{- if not .Site.IsServer }} {{ template \u0026#34;_internal/google_analytics_async.html\u0026#34; . }} {{- end }} \u0026lt;/head\u0026gt; "
    }
,
    {
        "ref": "https://www.ariesme.com/posts/2019/add_prism_for_hugo/",
        "title": "Hugo添加Prism代码高亮",
        "section": "posts",
        "tags": ["hugo","prism"],
        "date" : "2019.02.22",
        "body": "Hugo自带的Chroma代码高亮不是很方便, 还是请出Prism.\n下载js和css文件 在PrismJS官网DIY自己需要的主题, 语言以及其他插件如行号.\n将js和css文件放到对应目录下  ./static/css/prism.css ./static/js/prism.js  在页面模板文件中添加js和css引用  新建默认基础模板文件(./layouts/_default/baseof.html) 将主题中的基础模板文件内容(./themes/theme_name/layouts/_default/baseof.html)拷贝到新文件中 在head字段尾部加入自定义css, 在body字段尾部加入自定义js  \u0026lt;head\u0026gt; {{ range .Site.Params.customCSS -}} \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;{{ . | relURL }}\u0026#34;\u0026gt; {- end }} \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; {{ range .Site.Params.customJS -}} \u0026lt;script src=\u0026#34;{{ . | relURL }}\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; {{- end }} \u0026lt;/body\u0026gt; 配置文件中添加自定义js和css参数 在config.toml中添加如下参数, 并设置好js和css文件路径.\n[Params] customCSS = [\u0026#34;css/prism.css\u0026#34;] # Include custom CSS files customJS = [\u0026#34;js/prism.js\u0026#34;] # Include custom JS files 文章中代码高亮格式 Markdown文件中既可以使用```块标记来调用Prism高亮, 同时也可以使用Prism自己的格式.\n line-numbers 表示添加行号 language-html 设置语言种类  \u0026lt;pre class=\u0026#34;line-numbers\u0026#34;\u0026gt;\u0026lt;code class=\u0026#34;language-html\u0026#34;\u0026gt;your_code\u0026lt;/code\u0026gt;\u0026lt;/pre\u0026gt; "
    }
,
    {
        "ref": "https://www.ariesme.com/posts/2019/add_archive_page_for_hugo/",
        "title": "Hugo添加归档页面",
        "section": "posts",
        "tags": ["hugo"],
        "date" : "2019.02.19",
        "body": "Hugo默认并没有归档页面, 但可以单独添加一个归档页面.\n新建归档单页面模板  在Hugo根目录下新建模板文件(./layouts/archive/single.html) 将主题目录下的默认模板文件内容(./themes/theme_name/layouts/_default/single.html)拷贝到新建的模板文件  替换页面展现部分代码 将新建的模板文件中的页面展现部分替换成如下代码.\n 归档目录   .Site.Pages \u0026ldquo;Section\u0026rdquo; \u0026ldquo;post\u0026rdquo; 归档目录设置为content/post  可选归档时间   .Pages.GroupByDate \u0026ldquo;2006\u0026rdquo; 按年归档 .Pages.GroupByDate \u0026ldquo;2006-01\u0026rdquo; 按年月归档  折叠展开功能   通过details标签实现  \u0026lt;h2\u0026gt; {{ range where .Site.Pages \u0026#34;Section\u0026#34; \u0026#34;post\u0026#34; }} {{ range (.Pages.GroupByDate \u0026#34;2006\u0026#34;) }} \u0026lt;details class=\u0026#34;menu\u0026#34; open\u0026gt; \u0026lt;summary\u0026gt;{{ .Key }}\u0026lt;/summary\u0026gt; {{ range .Pages }} \u0026lt;article\u0026gt;\u0026lt;h3\u0026gt;\u0026lt;a href=\u0026#34;{{ .Permalink }}\u0026#34; title=\u0026#34;{{ .Title }}\u0026#34;\u0026gt;{{ .Title }}\u0026lt;/a\u0026gt;\u0026lt;/h3\u0026gt;\u0026lt;/article\u0026gt; {{ end }} \u0026lt;/details\u0026gt; {{ end }} {{ end }} \u0026lt;/h2\u0026gt; 新建归档页面  新建一个归档页面./content/archive.md 在文件头添加type字段来引用归档页面模板 在文件头添加menu字段将归档页面链接添加到主目录  --- title: \u0026#34;Archive\u0026#34; type: archive menu: main: name: Archive weight: 1 --- "
    }
,
    {
        "ref": "https://www.ariesme.com/posts/2019/autoit_windows_testcase/",
        "title": "AutoIt的窗口自动化测试",
        "section": "posts",
        "tags": ["autoit","selenium"],
        "date" : "2019.01.16",
        "body": "Selenium自动化测试时会遇到需要调用Windows弹出窗口上传或下载文件的场景. 可以使用AutoIt工具实现.\n安装AutoIt AutoIt官网下载安装即可. 实际上只有编写和调试代码时会用到AutoIt软件工具, 代码写好后运行期间是不需要的. 也就是说代码可以在未安装AutoIt软件的测试机上运行.\n添加Maven依赖库 在Selenium工程的Maven配置文件pom.xml添加. 如需最新的版本可以去Maven依赖库官网查找.\n\u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;de.openkeyword\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;autoit\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;0.1.13\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; 定位和操作窗口元素 以文件上传窗口为例.\n 在AutoIt的安装目录下运行Au3Info.exe(64位系统请使用Au3Info_x64.exe)工具, 点击并拖动Finder Tool按钮至弹出框输入文件路径和打开按钮, 并记录下对应的Title和ClassnameNN字段 在Selenium的测试用例java文件中添加如下代码  AutoItX autoItX = new AutoItX(); //Wait for windows opening autoItX.winWait(\u0026#34;Open\u0026#34;); autoItX.sleep(1000); //Focus on Upload file path field autoItX.controlFocus( \u0026#34;Open\u0026#34;, /*Title(Upload file path field)*/ \u0026#34;\u0026#34;, \u0026#34;Edit1\u0026#34; /*ClassnameNN(Upload file path field)*/ ); autoItX.sleep(1000); //Input upload file path autoItX.controlSend( \u0026#34;Open\u0026#34;, /*Title(Upload file path field)*/ \u0026#34;\u0026#34;, \u0026#34;Edit1\u0026#34;, /*ClassnameNN(Upload file path field)*/ imagePath /*Upload file path*/ ); autoItX.sleep(1000); //Click Open button to submit autoItX.controlClick( \u0026#34;Open\u0026#34;, /*Title(Open button)*/ \u0026#34;\u0026#34;, \u0026#34;Button1\u0026#34; /*ClassnameNN(Open button)*/ ); autoItX.sleep(1000); "
    }
,
    {
        "ref": "https://www.ariesme.com/posts/2019/add_prism_for_wordpress/",
        "title": "WordPress添加Prism代码高亮",
        "section": "posts",
        "tags": ["wordpress","prism"],
        "date" : "2019.01.15",
        "body": "在WordPress中添加和配置Prism代码高亮插件.\n下载js和css文件 在PrismJS官网DIY自己需要的主题, 语言以及其他插件如行号.\n上传js和css文件至WP使用主题目录下 路径:./wp-content/themes/your_themes_name.\n添加js和css配置 functions.php 文件中添加如下代码.\nfunction add_prism() { wp_register_style( \u0026#39;prismCSS\u0026#39;, get_stylesheet_directory_uri() . \u0026#39;/prism.css\u0026#39; ); wp_register_script( \u0026#39;prismJS\u0026#39;, get_stylesheet_directory_uri() . \u0026#39;/prism.js\u0026#39; ); wp_enqueue_style(\u0026#39;prismCSS\u0026#39;); wp_enqueue_script(\u0026#39;prismJS\u0026#39;); } add_action(\u0026#39;wp_enqueue_scripts\u0026#39;, \u0026#39;add_prism\u0026#39;); "
    }
,
    {
        "ref": "https://www.ariesme.com/posts/2019/nginx_redirect_http_to_https/",
        "title": "Nginx强制http跳转https",
        "section": "posts",
        "tags": ["nginx"],
        "date" : "2019.01.13",
        "body": "配置nginx强制http请求跳转到https, 同时也可以配置强制跳转www.\n强制http跳转https 修改相应站点的vhost配置文件, 文件路径:/usr/local/nginx/conf/vhost/www.cloudme.com.conf.\nserver { listen 80; #listen [::]:80;  server_name www.cloudme.com cloudme.com; #Redirect http to https  return 301 https://$host$request_uri; } 强制非www跳转www 上述修改server配置的方法, 理论上可以做到强制跳转www的. 但是对于WordPress还需要在后台Settings里面把站点配置成https://www.cloudme.com.\nSettings-\u0026gt;General-\u0026gt;WordPress Address (URL) Settings-\u0026gt;General-\u0026gt;Site Address (URL) "
    }
]